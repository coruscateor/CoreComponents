//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3607
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data;

#pragma warning disable 0162

namespace CoreComponents.Data.Schema
{

	public static class DbTypeConverter
	{

		/*
		string Fullstring = "System.string";
		
		string FullString = "System.String";
		
		string Fullint = "System.int";
		
		string Fullint16 = "System.Int16";
		
		string Fullint32 = "System.Int32";
		
		string Fullint64 = "System.Int64";
		
		string FullSByte = "System.SByte";
		
		string FullString = "System.String";
		
		string FullDateTime = "System.DateTime";
		*/
		
		// http://msdn.microsoft.com/en-us/library/system.data.dbtype.aspx
		
		//static readonly Type BiType = typeof(Bi
		
		//AnsiString
		
		//Binary
		
		static readonly Type ByteType = typeof(Byte);
		
		static readonly Type boolType = typeof(bool);
		
		static readonly Type BooleanType = typeof(Boolean);
		
		//Currency
		
		//Date
		
		static readonly Type DateTimeType = typeof(DateTime);
		
		static readonly Type decimalType = typeof(decimal);
		
		static readonly Type DecimalType = typeof(Decimal);
		
		static readonly Type doubleType = typeof(double);
		
		static readonly Type DoubleType = typeof(Double);
		
		static readonly Type GuidType = typeof(Guid);
		
		static readonly Type intType = typeof(int);
		
		static readonly Type Int16Type = typeof(Int16);
		
		static readonly Type Int32Type = typeof(Int32);
		
		static readonly Type Int64Type = typeof(Int64);
		
		static readonly Type objectType = typeof(object);
		
		static readonly Type ObjectType = typeof(Object);
		
		static readonly Type sbyteType = typeof(sbyte);
		
		static readonly Type SByteType = typeof(SByte);
		
		//static readonly Type singleType = typeof(single);
		
		static readonly Type SingleType = typeof(Single);
		
		static readonly Type stringType = typeof(string);
		
		static readonly Type StringType = typeof(String);
		
		//TimeFullName
		
		static readonly Type uintType = typeof(uint);
		
		static readonly Type UInt16Type = typeof(UInt16);
		
		static readonly Type UInt32Type = typeof(UInt32);
		
		static readonly Type UInt64Type = typeof(UInt64);
		
		//VarNumeric
		
		//AnisistringFixedLength
		
		//StringFixedLength
		
		//Xml
		
		//DateTime2
		
		//DateTimeOffset
		
		
		
		static DbTypeConverter()
		{
		}
		
		public static DbType FromPrimitive(Type Primitive)
		{
			
			if(Primitive == ByteType)
			{
				
				return DbType.Byte;
				
			}
			if(Primitive == boolType)
			{
				
				return DbType.Boolean;
				
			}
			if(Primitive == BooleanType)
			{
				
				return DbType.Boolean;
				
			}	
			if(Primitive == DateTimeType)
			{
				
				return DbType.DateTime;
				
			}	
			if(Primitive == decimalType)
			{
				
				return DbType.Decimal;
				
			}
			if(Primitive == DecimalType)
			{
				
				return DbType.Decimal;
				
			}	
			if(Primitive == doubleType)
			{
				
				return DbType.Double;
				
			}	
			if(Primitive == DoubleType)
			{
				
				return DbType.Double;
				
			}	
			if(Primitive == GuidType)
			{
				
				return DbType.Guid;
				
			}
			if(Primitive == intType)
			{
				
				return DbType.Int32;
				
			}	
			if(Primitive == Int16Type)
			{
				
				return DbType.Int16;
				
			}
			if(Primitive == Int32Type)
			{
				
				return DbType.Int32;
				
			}	
			if(Primitive == Int64Type)
			{

				return DbType.Int64;

			}	
			if(Primitive == objectType)
			{
				
				return DbType.Object;
				
			}	
			if(Primitive == ObjectType)
			{
				
				return DbType.Object;
				
			}	
			if(Primitive == sbyteType)
			{
				
				return DbType.SByte;
				
			}
			if(Primitive == sbyteType)
			{
				
				return DbType.SByte;
				
			}
			if(Primitive == SingleType)
			{
				
				return DbType.Single;
				
			}
			if(Primitive == stringType)
			{
				
				return DbType.String;
				
			}
			if(Primitive == StringType)
			{
				
				return DbType.String;
				
			}
			if(Primitive == uintType)
			{
				
				return DbType.UInt32;
		
			}
			if(Primitive == UInt16Type)
			{
				
				return DbType.UInt16;
				
			}
			if(Primitive == UInt32Type)
			{
				
				return DbType.UInt32;
				
			}
			if(Primitive == UInt64Type)
			{
				
				return DbType.UInt64;
				
			} else
			{
				//For pks
				return DbType.Int32;
				
			};
			
			/*
			switch(Primitive)
			{
				
			case ByteType:
				
				return DbType.Byte;
				
				break;
				
			case boolType:
				
				return DbType.Boolean;
				
				break;
				
			case BooleanType:
				
				return DbType.Boolean;
				
				break;
				
			case DateTimeType:
				
				return DbType.DateTime;
				
				break;
				
			case decimalType:
				
				return DbType.Decimal;
				
				break;
				
			case DecimalType:
				
				return DbType.Decimal;
				
				break;
				
			case doubleType:
				
				return DbType.Double;
				
				break;
				
			case DoubleType:
				
				return DbType.Double;
				
				break;
				
			case GuidType:
				
				return DbType.Guid;
				
				break;
				
			case intType:
				
				return DbType.Int32;
				
				break;
				
			case Int16Type:
				
				return DbType.Int16;
				
				break;
				
			case Int32Type:
				
				return DbType.Int32;
				
				break;
				
			case Int64Type:

				return DbType.Int64;

				break;
				
			case objectType:
				
				return DbType.Object;
				
				break;
				
			case ObjectType:
				
				return DbType.Object;
				
				break;
				
			case sbyteType:
				
				return DbType.SByte;
				
				break;
				
			case sbyteType:
				
				return DbType.SByte;
				
				break;
				
			case SingleType:
				
				return DbType.Single;
				
				break;
				
			case stringType:
				
				return DbType.String;
				
				break;
				
			case StringType:
				
				return DbType.String;
				
				break;
				
			case uintType:
				
				return DbType.UInt32;
		
				break;
				
			case UInt16Type:
				
				return DbType.UInt16;
				
				break;
		
			case UInt32Type:
				
				return DbType.UInt32;
				
				break;
					
			case UInt64Type:
				
				return DbType.UInt64;
				
				break;
			default:
				
				return DbType.Object;
				
				break;
			}
			*/
			
		}
		
		public static Type FromDbType(DbType TheDbType)
		{
			
			switch(TheDbType)
			{
				
			case DbType.Byte:
				
				return ByteType;
				
				break;
			case DbType.Boolean:
				
				return boolType;
				
				break;
			case DbType.DateTime:
				
				return DateTimeType;
				
				break;
			case DbType.Decimal:
				
				return decimalType;
				
				break;
			case DbType.Double:
				
				return doubleType;
				
				break;
			case DbType.Guid:
				
				return GuidType;
				
				break;
			case DbType.Int16:
				
				return Int16Type;
				
				break;
			case DbType.Int32:
				
				return Int32Type;
				
				break;
			case DbType.Int64:

				return Int64Type;

				break;
			case DbType.Object:
				
				return objectType;
				
				break;
			case DbType.SByte:
				
				return sbyteType;
				
				break;
			case DbType.String:
				
				return stringType;
				
				break;
			case DbType.UInt16:
				
				return UInt16Type;
				
				break;
			case DbType.UInt32:
				
				return uintType;
		
				break;
			case DbType.UInt64:
				
				return UInt64Type;
				
				break;
			default:
				
				//For pks
				return intType;
				
				break;
			}
			
		}
	}
}
